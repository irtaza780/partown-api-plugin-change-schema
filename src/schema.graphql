input accountBookInput {
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
  AccountId: ID!
  AccountBookId: ID
}

type AccountBook {
  _id: ID!
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
}

input AvailableFulfillmentMethodInput {
  AccountId: ID!
  FulfillmentMethodId: ID!
  status: Boolean!
}

scalar AvailableFulfillmentMethod
type deleteOutput {
  success: Boolean
  message: String
  status: Int
}
input updatePassword {
  email: String!
  password: String!
}
type updatePasswordOutPut {
  success: Boolean
  message: String
  status: Int
}

input VieworCartInput {
  productId: String!
  flag: String!
}
type output {
  success: Boolean
  status: Int
  message: String
}
type purchaseOutput {
  success: Boolean
  status: Int
  message: String
}
extend type Mutation {
  purchaseProperty(productId: String): purchaseOutput
  deleteAccount(accountId: ID!): Boolean
  updateUserPassword(input: updatePassword): updatePasswordOutPut
  updateAccountpayBookEntry(input: accountBookInput): AccountBook
  updateAvailableFulfillmentMethodEntry(
    input: AvailableFulfillmentMethodInput
  ): [AvailableFulfillmentMethod]
  addProductVieworCart(input: VieworCartInput): output
}

type myPorperties {
  properties: [Product]
  success: Boolean
  status: Int
  message: String
}

input propertyFiltersInput {
  state: [String]
  propertyType: String
  propertySaleType: String
}

enum sortBy {
  "sort by property units (test (2))"
  propertyUnits

  "sort by property price"
  propertyPrice
}

enum sortOrder {
  "asc"
  asc

  "desc"
  desc
}

input myPorpertiesInput {
  pageNo: Int!
  perPage: Int!
  propertyFilters: propertyFiltersInput
  sortBy: sortBy
  sortOrder: sortOrder
}

extend type Query {
  getMyProperties(input: myPorpertiesInput): myPorperties
}

type previousOwners {
  userId: String
  userName: String
}
type priceHistory {
  price: Float
  date: DateTime
}
type investmentDetails {
  description: String
  landValue: String
  developmentValue: String
  agency: String
  legal: String
  totalCost: String
  unitPrice: String
}
type location {
  country: String
  state: String
  location: String
}
type documents {
  url: String
}
type financials {
  title: String
  value: Float
}
type propertyEvents {
  title: String
  details: String
  date: DateTime
  addedBy: ID
  addedByInfo: Account
}
type propertySaleType {
  "property type"
  type: String
}
type area {
  unit: String
  price: Float
  value: Float
  availableQuantity: Float
}

type currentOwner {
  userId: String
  userName: String
}
"floor plans media"
type planMedia {
  name: String
  url: String
  unsignedUrl: String
}
"property location coordinates"
type coordinates {
  latitude: String
  longitude: String
}

extend type Product {
  "uploadedBy: uploadedBy"
  currentOwner: currentOwner
  ownerShip: String
  propertyType: String
  documents: [documents]
  ownersList: [String]
  financials: [financials]
  propertyEvents: [propertyEvents]
  expiryTime: DateTime
  investmentDetails: investmentDetails
  propertySaleType: propertySaleType
  previousOwners: [previousOwners]
  upVotes: Int
  downVotes: Int
  manager: String
  managerInfo: Account
  area: area
  priceHistory: [priceHistory]
  productViews: Int
  totalCarts: Int
  ancestorId: ID
  parentId: ID
  location: location
  planMedia: [planMedia]
  coordinates: coordinates
  activeStatus: Boolean
  yield: Float
  investmentCase: String
}

input documentsInput {
  url: String
}
input financialsInput {
  title: String
  value: Float
}

input propertyEventsInput {
  title: String
  details: String
  date: DateTime
  addedBy: ID
}

input areaInput {
  unit: String
  price: Float
  value: Float
  availableQuantity: Float
}
input priceHistoryInput {
  price: Float
  date: DateTime
}

input investmentDetailsInput {
  description: String
  landValue: String
  developmentValue: String
  agency: String
  legal: String
  totalCost: String
  unitPrice: String
}
input propertySaleTypeInput {
  "property type"
  type: String
}
input locationInput {
  country: String
  state: String
  location: String
}
input planMediaInput {
  name: String
  url: String
}
input coordinatesInput {
  latitude: String
  longitude: String
}

extend input ProductInput {
  "uploadedBy: uploadedByinput"
  propertyType: String
  investmentDetails: investmentDetailsInput
  propertySaleType: propertySaleTypeInput
  location: locationInput
  "investment case of the property"
  investmentCase: String
  manager: String
  area: areaInput
  priceHistory: [priceHistoryInput]
  documents: [documentsInput]
  financials: [financialsInput]
  propertyEvents: [propertyEventsInput]
  expiryTime: DateTime
  planMedia: [planMediaInput]
  coordinates: coordinatesInput
  activeStatus: Boolean
  ancestorId: ID
  parentId: ID
  yield: Float
}

extend type CatalogProduct {
  "uploadedBy: uploadedBy"
  currentOwner: currentOwner
  ownerShip: String
  area: area
  priceHistory: [priceHistory]
  propertyType: String
  investmentDetails: investmentDetails
  documents: [documents]
  ownersList: [String]
  financials: [financials]
  propertyEvents: [propertyEvents]
  expiryTime: DateTime
  planMedia: [planMedia]
  coordinates: coordinates
  activeStatus: Boolean
  propertySaleType: propertySaleType
  previousOwners: [previousOwners]
  location: location
  upVotes: Int
  investmentCase: String
  downVotes: Int
  manager: String
  managerInfo: Account
  ancestorId: ID
  parentId: ID
  yield: Float
}

extend type ImageSizes {
  unSignedLarge: String

  "Use this URL to get a medium resolution file for this image (unSigned image s3 Bucket)"
  unSignedMedium: String

  """
  Use this URL to get this image with its original resolution as uploaded. This may not be
  the true original size if there is a hard cap on how big image files can be (unSigned image s3 Bucket).
  """
  unSignedOriginal: String

  "Use this URL to get a small resolution file for this image (unSigned image s3 Bucket)"
  unSignedSmall: String

  "Use this URL to get a thumbnail resolution file for this image (unSigned image s3 Bucket)"
  unSignedThumbnail: String
}

# extend type planMedia {
#   unsignedUrl: String
# }

extend type documents {
  unsignedUrl: String
}

extend type poAddress {
  unsignedUrl: String
}
extend type govId {
  unsignedUrl: String
}

type uploadedBy {
  name: String
  image: String
  userId: ID
  FulfillmentMethods: [AvailableFulfillmentMethod]
}
input uploadedByinput {
  name: String
  image: String
  userId: ID
}
extend type Account {
  Product: [Product]
  identityVerified: Boolean
  isBanned: Boolean
  orderFulfillment: [Order]
  AccountBook: [AccountBook]
  AvailableFulfillmentMethods: [AvailableFulfillmentMethod]
  unsignedProfileUrl: String
}
